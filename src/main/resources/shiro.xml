<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/util
           http://www.springframework.org/schema/util/spring-util.xsd">

    <bean id="jdbcRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
        <property name="dataSource" ref="dataSource"/>
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"/>
                <!-- true means hex encoded, false means base64 encoded -->
                <property name="storedCredentialsHexEncoded" value="true"/>
            </bean>
        </property>
    </bean>

    <bean id="credentialsMatcher"
          class="org.apache.shiro.authc.credential.HashedCredentialsMatcher"
          p:hashAlgorithmName="MD5"
          p:storedCredentialsHexEncoded="true"/>

    <bean id="jpaRealm"
          class="com.kevin.examples.shiro.Realm.JpaRealm"
          p:authorizationCachingEnabled="false"
          p:credentialsMatcher-ref="credentialsMatcher"/>

    <bean id="securityManager"
          class="org.apache.shiro.web.mgt.DefaultWebSecurityManager"
          p:realm-ref="jpaRealm"/>

    <!-- 基于Form表单的身份验证过滤器-->
    <bean id="formAuthenticationFilter"
          class="org.apache.shiro.web.filter.authc.FormAuthenticationFilter"
          p:usernameParam="username"
          p:passwordParam="password"
          p:loginUrl="/login.jsp"/>

    <!-- Shiro 的Web过滤器-->
    <bean id="shiroFilter"
          class="org.apache.shiro.spring.web.ShiroFilterFactoryBean"
          p:securityManager-ref="securityManager"
          p:loginUrl="/login.jsp"
          p:unauthorizedUrl="/unauthorized.jsp">
        <property name="filters">
            <util:map>
                <entry key="authc" value-ref="formAuthenticationFilter"/>
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <value>
                /index.jsp = anon
                /unauthorized.jsp = anon
                /login.jsp = authc
                /logout = logout
                /** = user
            </value>
        </property>
    </bean>

    <!-- For simplest integration, so that all SecurityUtils.* methods work in all cases, -->
    <!-- make the securityManager bean a static singleton.  DO NOT do this in web         -->
    <!-- applications - see the 'Web Applications' section below instead.                 -->
    <!--  相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"
          p:staticMethod="org.apache.shiro.SecurityUtils.setSecurityManager"
          p:arguments-ref="securityManager"/>

    <!--
        Bean post processor for Spring that automatically calls the init() and/or destroy() methods
        on Shiro objects that implement the Initializable or Destroyable interfaces, respectfully.
        This post processor makes it easier to configure Shiro beans in Spring,
        since the user never has to worry about whether or not if they have to specify init-method and destroy-method bean attributes.
    -->
    <bean id="lifecycleBeanPostProcessor"
          class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Enable Shiro Annotations for Spring-configured beans.  Only run after -->
    <!-- the lifecycleBeanProcessor has run: -->
    <!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>-->
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"
          p:securityManager-ref="securityManager"/>

</beans>